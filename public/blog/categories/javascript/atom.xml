<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Interview Bits]]></title>
  <link href="http://interviewbits.herokuapp.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://interviewbits.herokuapp.com/"/>
  <updated>2015-01-07T10:37:55+02:00</updated>
  <id>http://interviewbits.herokuapp.com/</id>
  <author>
    <name><![CDATA[Asaf David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Car Race]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/03/car_race/"/>
    <updated>2014-12-03T21:55:07+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/03/car_race</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Imagine a car race, where a bunch of cars are about to drive for a certain distance on a linear track. 
Given the track length and the initial speed of every car, you should print a message when some car wins the race.
As cars speed is not constant, you should expose function <code>update(car_id, speed)</code> which is used to update the current speed of certain car.
<!--more-->
—</p>

<p><strong>Solution</strong>:</p>

<p>&#8220;` Javascript
    function Race(len, speeds) {
        this.speeds = speeds;
        this.remain = [];
        this.lastUpdate = getMillis();</p>

<pre><code>    for (var i = 0; i != speeds.length; i++) {
        this.remain.push(len / speeds[i]);
    }

    this.triggerTimeoutForLeader();
}

Race.prototype.triggerTimeoutForLeader = function() {
    var min = Math.min.apply(Math, this.remain);
    var minId = this.remain.indexOf(min);
    if (this.to) {
        clearTimeout(this.to);
    }
    this.to = setTimeout(function(){ winner(minId) }, min * 1000);
};

Race.prototype.update = function(id, speed) {
    var millis = getMillis();
    var elapsed = (millis - this.lastUpdate) / 1000;
    this.lastUpdate = millis;
    for (var i = 0; i != this.remain.length; i++) {
        this.remain[i] = this.remain[i] - elapsed;
    }
    this.remain[id] = this.remain[id] * this.speeds[id] / speed;
    this.speeds[id] = speed;
    this.triggerTimeoutForLeader();
};

var winner = function(id) {
    console.log('Car', id, 'has won the race!');
};

var getMillis = function() {
    var d = new Date();
    return d.getTime();
} ``` Have any questions / remarks? leave them at the commonts below!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log Every Second]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/02/log-every-second/"/>
    <updated>2014-12-02T21:54:15+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/02/log-every-second</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Please write a program which will log the sequence 1, 2, 3… , one number every second.
<!--more-->
—</p>

<p><strong>Solution</strong>:
The following is a simple Javascript implementation:</p>

<p>&#8220;` Javascript
(function() {
    var i = 0;
    var delay = 1000;
    var logger = function() {
      ++i;
      console.log(i);
      setTimeout(logger, delay);
    }</p>

<pre><code>logger(); })(); ```
</code></pre>

<p><strong>Follow-up Question</strong>: Can we be centain that the delay between two logging of two consecutive integerss will be exactly 1 second? If not, how would you improve it?</p>

<p><strong>Solution</strong>: An important concept to remember is that with Javascript timers, delay is not guaranteed. The browser operates in a single thread manner, processing
events that accumulate in an events queue and handles them sequentially. This means that there may be a slight delay between the moment that the event was fired and
the moment that the browser started to process it.</p>

<p>To improve the delays accurancy we can run this code in a dedicated thread, by utilizing a <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers">web worker</a>.</p>

]]></content>
  </entry>
  
</feed>
