<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithms | Interview Bits]]></title>
  <link href="http://interviewbits.herokuapp.com/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://interviewbits.herokuapp.com/"/>
  <updated>2014-12-21T23:55:35+02:00</updated>
  <id>http://interviewbits.herokuapp.com/</id>
  <author>
    <name><![CDATA[Asaf David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Celebrities]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/15/celebrities/"/>
    <updated>2014-12-15T19:32:20+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/15/celebrities</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Let us define a <em>celebritiy</em> as a person who is known by everyone, yet knows no one.
Assume you have a function <script type="math/tex">knows(A,B)</script> which returns TRUE if <script type="math/tex">A</script> knows <script type="math/tex">B</script> (and runs in constant time).
Implement a function that finds the celebrities in a given list of people. This function should run in linear time complexity.</p>

<p><strong>Example</strong>: If the people list is <script type="math/tex">[A, B, C, D]</script> and the following relations apply:</p>

<pre><code>A knows B
A knows D
C knows B
C knows A
D knows B
</code></pre>

<p>Then the result should be <script type="math/tex">B</script>.</p>

<hr />

<p><strong>Solution</strong>: First, we can easily deduce that according to the definition, there can only be one celebrity
in a group of people (if both <script type="math/tex">A</script> and <script type="math/tex">B</script> are celebrities, then <script type="math/tex">A</script> must know <script type="math/tex">B</script> and <script type="math/tex">B</script> must know <script type="math/tex">A</script>, but a celebrity knows no one).</p>

<p>The main idea is that given 2 potential celebrities, <script type="math/tex">A</script> and <script type="math/tex">B</script>, we can ask <code>knows(A,B)</code> and eliminate one of them (if <script type="math/tex">A</script> knows <script type="math/tex">B</script> then we can eliminate <script type="math/tex">A</script>, else we can eliminate <script type="math/tex">B</script>). 
The actual algorithm is as follows: build a potential celebrities pool - a linked list containing all people. Iterate over the list in pairs, and for each pair eliminate one people as described above, and remove him from the list.
When we reach the end of the list, weâ€™ve eliminated half of the population. Apply the elimination step iteratively until the list length is one. This is the celebrity.</p>

<p>The time complexity for each iteration is linear in the size of the population. Since we eliminate half of the population in each step, the total running time is linear as well (<script type="math/tex">n + \frac{n}{2} + \frac{n}{4} + \frac{n}{8} + \ldots \rightarrow 2n</script>).</p>

<p>The following is a Scala implementation:</p>

<p>&#8220;` Scala
    class Celebrities {</p>

<pre><code>    def diminish(people: List[Int]): List[Int] = people match {
        case Nil =&gt; Nil
        case a :: b :: rest =&gt; (if (knows(a,b)) b else a) :: diminish(rest)
    }
    
    def celebrity(people: List[Int]): Int = 
        if (people.length == 1) people.head 
        else celebrity(diminish(people))

} ```
</code></pre>

<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
</feed>
