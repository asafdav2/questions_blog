<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Interview Bits]]></title>
  <link href="http://interviewbits.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://interviewbits.herokuapp.com/"/>
  <updated>2015-02-05T19:11:52+02:00</updated>
  <id>http://interviewbits.herokuapp.com/</id>
  <author>
    <name><![CDATA[Asaf David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Center Points]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2015/02/02/center-points/"/>
    <updated>2015-02-02T17:55:02+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2015/02/02/center-points</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: We are given a set of points on the <script type="math/tex">x</script> axis; Each point is represented by its <script type="math/tex">x</script> coordinate.
A point is called <strong>central</strong> if the distance between it to any other point in the set is at most 10.
Design and implement a data structure that supports the following three operations:</p>

<ul>
  <li><code>insert(x)</code>, <code>delete(x)</code> - insertion / deletion of point from the set.</li>
  <li><code>center(x)</code> - returns true if <script type="math/tex">x</script> exists in the set and is central.</li>
</ul>

<!--more-->

<hr />

<p><strong>Solution</strong>: We will store the points in a balanced tree (such as <a href="http://en.wikipedia.org/wiki/AVL_tree">AVL tree</a>, <a href="http://en.wikipedia.org/wiki/Red%E2%80%93black_tree">Red-black tree</a> or <a href="http://en.wikipedia.org/wiki/B-tree">B-Tree</a>. Specifically Java’s <a href="http://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html">TreeSet</a> is implemented using a Red-Black tree). This will ensure insertion / deletion in <script type="math/tex">O(lgn)</script> time complexity.
To find if a point is central we can get the minimum and maximum values from the set (<script type="math/tex">O(lgn)</script> as well) and check if the distance between <code>x</code> to both the min/max values is at most 10.</p>

<p>The following is a Java implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="Java"><span class="line"><span class="kd">class</span> <span class="nc">CenterPoints</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">CENTER_DISTANCE</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">tree</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">tree</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">center</span><span class="o">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(!</span><span class="n">tree</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="kd">final</span> <span class="kt">double</span> <span class="n">min</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="na">first</span><span class="o">();</span>
</span><span class="line">        <span class="kd">final</span> <span class="kt">double</span> <span class="n">max</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="na">last</span><span class="o">();</span>
</span><span class="line">        <span class="k">return</span> <span class="o">((</span><span class="n">x</span> <span class="o">-</span> <span class="n">min</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">CENTER_DISTANCE</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">max</span> <span class="o">-</span> <span class="n">x</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">CENTER_DISTANCE</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replace Multiplication, Power and Modulo With Bitwise Operators]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2015/01/06/replace-multiplication-power-and-modulo-with-bitwise-operators/"/>
    <updated>2015-01-06T07:40:49+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2015/01/06/replace-multiplication-power-and-modulo-with-bitwise-operators</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Given the following equation:</p>

<script type="math/tex; mode=display">foo(x) = 6^x + 5x + x \text{ mod } 4</script>

<p>Your task is to fill an array <script type="math/tex">A</script> (with size <script type="math/tex">N</script>) such that <script type="math/tex">A[i] = foo(i)</script>. Your code must not use the multiplication, power or modulo operators.</p>

<!--more-->

<hr />

<p><strong>Solution</strong>: To replace the power operation, we’ll hold a variable <code>a</code> and multiply it by 6 in each iteration. Since we’re not allowed to use the <code>*</code> operator,
we’ll use bitwise operators: left shift of two bits is essentially a multiplication by 4, and we’ll add <code>a</code> to the result twice to get multiplication by 6.
The multiplication by 5 part is very similar. All that remains is to replace the modulo operation. mod by 4 is equal to bitwise AND with 3.</p>

<p>The following is a C solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="C"><span class="line"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">A</span><span class="p">[</span><span class="n">I</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="p">((</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line">  <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rectangles Store]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/18/rectangles-store/"/>
    <updated>2014-12-18T14:57:53+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/18/rectangles-store</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Your task is to implement a class that stores rectangles. A rectangle is defined by the following interface:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="Java"><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Rectangle</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="nf">getLeft</span><span class="o">();</span>
</span><span class="line">    <span class="kt">int</span> <span class="nf">getTop</span><span class="o">();</span>
</span><span class="line">    <span class="kt">int</span> <span class="nf">getRight</span><span class="o">();</span>
</span><span class="line">    <span class="kt">int</span> <span class="nf">getBottom</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You should implement the following interface:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="Java"><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">RectanglesStore</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">Rectangle</span> <span class="n">bounds</span><span class="o">,</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">Rectangle</span><span class="o">&gt;</span> <span class="n">rectangles</span><span class="o">);</span>
</span><span class="line">    <span class="n">Rectangle</span> <span class="nf">findRectangleAt</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The arguments to the <code>initialize</code> method are a rectangle that represents the bounds (e.g. the area in which other rectangles can appear), and a collection of rectangles.
You are required to store these rectangles in an efficient manner (in terms of memory consumption), and to later return the topmost rectangle per specified <script type="math/tex">x</script>, <script type="math/tex">y</script> location (or null in case no rectangle exists in the specified location) in the most time efficient way.</p>

<p>Note: The solution should support a large number of rectangles, and an extremely large bounding rectangle, so the following solutions are invalid:</p>

<ul>
  <li>a simple collection of rectangles (isn’t efficient enough performance-wise)</li>
  <li>a map of each point to its corresponding rectangle (isn’t efficient enough memory-wise)
<!--more--></li>
</ul>

<hr />

<p><strong>Solution</strong>:</p>

<p>In addition to the rectangles themselves, our solution will maintain 4 sorted sets: </p>

<ul>
  <li><code>lefts</code> - holds the <em>left</em> values of all rectangles</li>
  <li><code>rights</code> - holds the <em>right</em> values of all rectangles </li>
  <li><code>tops</code> - holds the <em>top</em> values of all rectangles  </li>
  <li><code>bottoms</code> - holds the <em>bottom</em> values of all rectangles</li>
</ul>

<p>Each entry in the preceeding sets will also hold the id of the corresponding rectangle.</p>

<p>Now, given <script type="math/tex">x,y</script> coordinates as input to <code>findRectangleAt</code>, we can filter all relevant rectangles:</p>

<ul>
  <li><code>rLefts</code> - list of rectangle id for all <code>left</code> entries having value <em>lower</em> than <script type="math/tex">x</script>.</li>
  <li><code>rRights</code> - list of rectangle id for all <code>right</code> entries having value <em>greater</em> than <script type="math/tex">x</script>.</li>
  <li><code>rTops</code> - list of rectangle id for all <code>tops</code> entries having value <em>lower</em> than <script type="math/tex">y</script>.</li>
  <li><code>rBottoms</code> - list of rectangle id for all <code>bottoms</code> entries having value <em>greater</em> than <script type="math/tex">y</script>.</li>
</ul>

<p>The point <script type="math/tex">(x,y)</script> is contained in every rectangle whose id appears in the 4 afromentioned lists.
Since we want to return the topmost such rectangle, and since the ids in <code>rTops</code> are sorted according to an ascending <script type="math/tex">y</script> value,
we can simply look for the first id in <code>rTops</code> that alse appear in <code>rLefts</code>, <code>rRights</code> and <code>rBottoms</code> and return it.</p>

<p>The following is a Java solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
</pre></td><td class="code"><pre><code class="Java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RectangleStoreImpl</span> <span class="kd">implements</span> <span class="n">RectanglesStore</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">Rectangle</span> <span class="n">bounds</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Rectangle</span><span class="o">&gt;</span> <span class="n">rectangles</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">numRectangles</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">lefts</span><span class="o">,</span> <span class="n">rights</span><span class="o">,</span> <span class="n">tops</span><span class="o">,</span> <span class="n">bottoms</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">PairComparator</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">p1</span><span class="o">.</span><span class="na">getFirst</span><span class="o">(),</span> <span class="n">p2</span><span class="o">.</span><span class="na">getFirst</span><span class="o">());</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">Rectangle</span> <span class="n">bounds</span><span class="o">,</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">Rectangle</span><span class="o">&gt;</span> <span class="n">rectangles</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">bounds</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">rectangles</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">rectangles</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="kd">final</span> <span class="n">PairComparator</span> <span class="n">comp</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PairComparator</span><span class="o">();</span>
</span><span class="line">        <span class="n">lefts</span>   <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;(</span><span class="n">comp</span><span class="o">);</span>
</span><span class="line">        <span class="n">tops</span>    <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;(</span><span class="n">comp</span><span class="o">);</span>
</span><span class="line">        <span class="n">rights</span>  <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;(</span><span class="n">comp</span><span class="o">);</span>
</span><span class="line">        <span class="n">bottoms</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;(</span><span class="n">comp</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">numRectangles</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Rectangle</span> <span class="n">r</span> <span class="o">:</span> <span class="n">rectangles</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">getLeft</span><span class="o">()</span>   <span class="o">&lt;</span> <span class="n">bounds</span><span class="o">.</span><span class="na">getLeft</span><span class="o">()</span>  <span class="o">||</span>
</span><span class="line">                <span class="n">r</span><span class="o">.</span><span class="na">getTop</span><span class="o">()</span>    <span class="o">&lt;</span> <span class="n">bounds</span><span class="o">.</span><span class="na">getTop</span><span class="o">()</span>   <span class="o">||</span>
</span><span class="line">                <span class="n">r</span><span class="o">.</span><span class="na">getRight</span><span class="o">()</span>  <span class="o">&gt;</span> <span class="n">bounds</span><span class="o">.</span><span class="na">getRight</span><span class="o">()</span> <span class="o">||</span>
</span><span class="line">                <span class="n">r</span><span class="o">.</span><span class="na">getBottom</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">bounds</span><span class="o">.</span><span class="na">getBottom</span><span class="o">())</span>
</span><span class="line">                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;rectangle&quot;</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="s">&quot;is out of bounds&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="n">lefts</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>  <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">r</span><span class="o">.</span><span class="na">getLeft</span><span class="o">(),</span>   <span class="n">numRectangles</span><span class="o">));</span>
</span><span class="line">            <span class="n">tops</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>   <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">r</span><span class="o">.</span><span class="na">getTop</span><span class="o">(),</span>    <span class="n">numRectangles</span><span class="o">));</span>
</span><span class="line">            <span class="n">rights</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">r</span><span class="o">.</span><span class="na">getRight</span><span class="o">(),</span>  <span class="n">numRectangles</span><span class="o">));</span>
</span><span class="line">            <span class="n">bottoms</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">r</span><span class="o">.</span><span class="na">getBottom</span><span class="o">(),</span> <span class="n">numRectangles</span><span class="o">));</span>
</span><span class="line">            <span class="n">numRectangles</span><span class="o">++;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Rectangle</span> <span class="nf">findRectangleAt</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">bounds</span><span class="o">.</span><span class="na">getLeft</span><span class="o">()</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">bounds</span><span class="o">.</span><span class="na">getRight</span><span class="o">()</span> <span class="o">||</span>
</span><span class="line">            <span class="n">y</span> <span class="o">&lt;</span> <span class="n">bounds</span><span class="o">.</span><span class="na">getTop</span><span class="o">()</span>  <span class="o">||</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">bounds</span><span class="o">.</span><span class="na">getBottom</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;requested point is outside of bounding box&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="kd">final</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">px0</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">x</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span>
</span><span class="line">                                     <span class="n">py0</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">y</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span>   <span class="n">rLefts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(),</span>
</span><span class="line">                               <span class="n">rTops</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(),</span>
</span><span class="line">                             <span class="n">rRights</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(),</span>
</span><span class="line">                            <span class="n">rBottoms</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">:</span>   <span class="n">lefts</span><span class="o">.</span><span class="na">headSet</span><span class="o">(</span><span class="n">px0</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>  <span class="n">rLefts</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getRight</span><span class="o">());}</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">:</span>    <span class="n">tops</span><span class="o">.</span><span class="na">headSet</span><span class="o">(</span><span class="n">py0</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>   <span class="n">rTops</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getRight</span><span class="o">());}</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">:</span>  <span class="n">rights</span><span class="o">.</span><span class="na">tailSet</span><span class="o">(</span><span class="n">px0</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span> <span class="n">rRights</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getRight</span><span class="o">());}</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">:</span> <span class="n">bottoms</span><span class="o">.</span><span class="na">tailSet</span><span class="o">(</span><span class="n">py0</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span><span class="n">rBottoms</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getRight</span><span class="o">());}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// since rTops is ordered from top down, the first rectangle found is the topmost</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Integer</span> <span class="n">numRect</span> <span class="o">:</span> <span class="n">rTops</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">rBottoms</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">numRect</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class="line">                <span class="n">rLefts</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">numRect</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class="line">                <span class="n">rRights</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">numRect</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">rectangles</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">numRect</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>  <span class="c1">// no rectangle was found</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Celebrities]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/15/celebrities/"/>
    <updated>2014-12-15T19:32:20+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/15/celebrities</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Let us define a <em>celebritiy</em> as a person who is known by everyone, yet knows no one.
Assume you have a function <script type="math/tex">knows(A,B)</script> which returns TRUE if <script type="math/tex">A</script> knows <script type="math/tex">B</script> (and runs in constant time).
Implement a function that finds the celebrities in a given list of people. This function should run in linear time complexity.</p>

<p><strong>Example</strong>: If the people list is <script type="math/tex">[A, B, C, D]</script> and the following relations apply:</p>

<pre><code>A knows B
A knows D
C knows B
C knows A
D knows B
</code></pre>

<p>Then the result should be <script type="math/tex">B</script>.
<!--more--> </p>

<hr />

<p><strong>Solution</strong>: First, we can easily deduce that according to the definition, there can only be one celebrity
in a group of people (if both <script type="math/tex">A</script> and <script type="math/tex">B</script> are celebrities, then <script type="math/tex">A</script> must know <script type="math/tex">B</script> and <script type="math/tex">B</script> must know <script type="math/tex">A</script>, but a celebrity knows no one).</p>

<p>The main idea is that given 2 potential celebrities, <script type="math/tex">A</script> and <script type="math/tex">B</script>, we can ask <code>knows(A,B)</code> and eliminate one of them (if <script type="math/tex">A</script> knows <script type="math/tex">B</script> then we can eliminate <script type="math/tex">A</script>, else we can eliminate <script type="math/tex">B</script>). 
The actual algorithm is as follows: build a potential celebrities pool - a linked list containing all people. Iterate over the list in pairs, and for each pair eliminate one people as described above, and remove him from the list.
When we reach the end of the list, we’ve eliminated half of the population. Apply the elimination step iteratively until the list length is one. This is the celebrity.</p>

<p>The time complexity for each iteration is linear in the size of the population. Since we eliminate half of the population in each step, the total running time is linear as well (<script type="math/tex">n + \frac{n}{2} + \frac{n}{4} + \frac{n}{8} + \ldots \rightarrow 2n</script>).</p>

<p>The following is a Scala implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="Scala"><span class="line"><span class="k">class</span> <span class="nc">Celebrities</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="n">diminish</span><span class="o">(</span><span class="n">people</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">people</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span> <span class="nc">Nil</span>
</span><span class="line">        <span class="k">case</span> <span class="n">a</span> <span class="o">::</span> <span class="n">b</span> <span class="o">::</span> <span class="n">rest</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="k">if</span> <span class="o">(</span><span class="n">knows</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">))</span> <span class="n">b</span> <span class="k">else</span> <span class="n">a</span><span class="o">)</span> <span class="o">::</span> <span class="n">diminish</span><span class="o">(</span><span class="n">rest</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="n">celebrity</span><span class="o">(</span><span class="n">people</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">people</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="n">people</span><span class="o">.</span><span class="n">head</span>
</span><span class="line">        <span class="k">else</span> <span class="n">celebrity</span><span class="o">(</span><span class="n">diminish</span><span class="o">(</span><span class="n">people</span><span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Number With Distribution]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/11/random-number-with-distribution/"/>
    <updated>2014-12-11T21:12:24+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/11/random-number-with-distribution</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Implement a function that takes a list of doubles <script type="math/tex">D = [d_0, d_1, \ldots, d_n]</script> (where <script type="math/tex">\sum_{i=0}^{n} d_i = 1.0</script>) and returns <script type="math/tex">i</script> with probability <script type="math/tex">d_i</script>.
For example, given the list <script type="math/tex">[0.3, 0.4, 0.2, 0.1]</script>, the function should return 0 with probability 0.3, 1 with probability 0.4, 2 with probability 0.2 and 3 with probability 0.1.
<!--more--></p>

<hr />

<p><strong>Solution</strong>:
We’ll start by building the running sums list of the input list, <script type="math/tex">D'</script>. Then, we’d generate a random number <script type="math/tex">r \in [0, 1]</script> and find where it 
“falls” in the running sums list; We’ll return the index <script type="math/tex">j</script> that satisfies <script type="math/tex">% &lt;![CDATA[
D'_j \geq r \wedge D'_{j+1} < r %]]&gt;</script>.
For example, the running sums list for the previous example is <script type="math/tex">D'=[0.0, 0.3, 0.7, 0.9, 1.0]</script>. Assuming we generated <script type="math/tex"> r = 0.67</script>, it falls between indices 1 and 2, 
so we’d return 1.
Since the running sums list is ordered by nature, we can use binary search to find the desired index.</p>

<p>The time complexity of the solution is <script type="math/tex">O(n)</script> to build the running sums list and <script type="math/tex">O(\log{}n)</script> for the search part. If we’re told that we’d generate many random numbers
for a given distributions list, we could optimize things by building the running sums list once and reusing it, as seen in the following Scala implementation. After building the
running sums list, it returns a function which reuses it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="Scala"><span class="line"><span class="k">import</span> <span class="nn">scala.collection.Searching._</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Distribution</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">precomputeFor</span><span class="o">(</span><span class="n">distribution</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">])</span><span class="k">:</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">sums</span> <span class="k">=</span> <span class="n">runningSums</span><span class="o">(</span><span class="n">distribution</span><span class="o">,</span> <span class="mf">0.0</span><span class="o">)</span>
</span><span class="line">    <span class="o">()</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class="line">        <span class="n">sums</span><span class="o">.</span><span class="n">search</span><span class="o">(</span><span class="n">util</span><span class="o">.</span><span class="nc">Random</span><span class="o">.</span><span class="n">nextDouble</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">          <span class="k">case</span> <span class="nc">Found</span><span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">p</span>
</span><span class="line">          <span class="k">case</span> <span class="nc">InsertionPoint</span><span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">runningSums</span><span class="o">(</span><span class="n">dist</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">],</span> <span class="n">sum</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">dist</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="nc">Nil</span> <span class="k">else</span> <span class="n">sum</span> <span class="o">::</span> <span class="n">runningSums</span><span class="o">(</span><span class="n">dist</span><span class="o">.</span><span class="n">tail</span><span class="o">,</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">dist</span><span class="o">.</span><span class="n">head</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Car Race]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/03/car_race/"/>
    <updated>2014-12-03T21:55:07+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/03/car_race</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Imagine a car race, where a bunch of cars are about to drive for a certain distance on a linear track. 
Given the track length and the initial speed of every car, you should print a message when some car wins the race.
As cars speed is not constant, you should expose function <code>update(car_id, speed)</code> which is used to update the current speed of certain car.
<!--more--></p>

<hr />

<p><strong>Solution</strong>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="Javascript"><span class="line"><span class="kd">function</span> <span class="nx">Race</span><span class="p">(</span><span class="nx">len</span><span class="p">,</span> <span class="nx">speeds</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">speeds</span> <span class="o">=</span> <span class="nx">speeds</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">remain</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">lastUpdate</span> <span class="o">=</span> <span class="nx">getMillis</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">!=</span> <span class="nx">speeds</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">this</span><span class="p">.</span><span class="nx">remain</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">len</span> <span class="o">/</span> <span class="nx">speeds</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">triggerTimeoutForLeader</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Race</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">triggerTimeoutForLeader</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">min</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">remain</span><span class="p">);</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">minId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">remain</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">min</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">clearTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">to</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">to</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="nx">winner</span><span class="p">(</span><span class="nx">minId</span><span class="p">)</span> <span class="p">},</span> <span class="nx">min</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Race</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">millis</span> <span class="o">=</span> <span class="nx">getMillis</span><span class="p">();</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">elapsed</span> <span class="o">=</span> <span class="p">(</span><span class="nx">millis</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastUpdate</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">lastUpdate</span> <span class="o">=</span> <span class="nx">millis</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">!=</span> <span class="k">this</span><span class="p">.</span><span class="nx">remain</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">this</span><span class="p">.</span><span class="nx">remain</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">remain</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">elapsed</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">remain</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">remain</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">speeds</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">/</span> <span class="nx">speed</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">speeds</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">triggerTimeoutForLeader</span><span class="p">();</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">winner</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Car&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="s1">&#39;has won the race!&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">getMillis</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort Words by Length and Frequency]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/03/sort-by-length-then-frequency/"/>
    <updated>2014-12-03T19:32:20+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/03/sort-by-length-then-frequency</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Implement a function that takes an unordered list of words (assume words may apper more than once), 
and returns a list of distinct words (that is, without duplications), sorted first by word 
length (descending) and then by the number of occurrences in the input list (descending as well).</p>

<p><strong>Example</strong>: </p>

<pre><code>sort([ ABC, ABC, ABB, ABCDE, A, B, B, B ]) = [ ABCDE, ABC, ABB, B, A ]
</code></pre>

<!--more-->

<hr />

<p><strong>Solution</strong>: Our solution is functional by nature. There are two functions: <code>occurrences</code>, which takes a list of words and return a list of (word, occurrences)
pairs, and <code>sort</code>, which takes the result of <code>occurrences</code>, sort the pairs according to the required order (first by length, then by occurrences) and strips
the occurrences amount from each pair, so the result will only contain the words.</p>

<p>The following is a Scala implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="Scala"><span class="line"><span class="k">class</span> <span class="nc">Sorter</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">sort</span><span class="o">(</span><span class="n">words</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class="line">    <span class="n">occurrences</span><span class="o">(</span><span class="n">words</span><span class="o">).</span><span class="n">toList</span>
</span><span class="line">      <span class="o">.</span><span class="n">sortBy</span><span class="o">(</span><span class="n">r</span> <span class="k">=&gt;</span> <span class="o">(-</span><span class="n">r</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">length</span><span class="o">,</span> <span class="o">-</span><span class="n">r</span><span class="o">.</span><span class="n">_2</span><span class="o">))</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">r</span> <span class="k">=&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">_1</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">occurrences</span><span class="o">(</span><span class="n">words</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span>
</span><span class="line">    <span class="n">words</span><span class="o">.</span><span class="n">groupBy</span><span class="o">(</span><span class="n">l</span> <span class="k">=&gt;</span> <span class="n">l</span><span class="o">)</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="n">_1</span><span class="o">,</span> <span class="n">t</span><span class="o">.</span><span class="n">_2</span><span class="o">.</span><span class="n">length</span><span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Power Set]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/03/power-set/"/>
    <updated>2014-12-03T19:32:20+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/03/power-set</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Given an integer <script type="math/tex">n</script>, implement a function to compute <script type="math/tex"> \mathcal P \left({n}\right)</script>, the <a href="http://en.wikipedia.org/wiki/Power_set">power set</a> of the set <script type="math/tex">\{1, \ldots, n\}</script>.
<!--more--></p>

<hr />

<p><strong>Solution</strong>: We are required to construct a set containing all subsets of <script type="math/tex">\{1, \ldots, n\}</script>. This can easily be computed recursively; <script type="math/tex"> \mathcal P \left({n}\right)</script> equals the concatanation of <script type="math/tex"> \mathcal P \left({n-1}\right)</script> with 
the set of sets resulted by appending $n$ to every set in <script type="math/tex"> \mathcal P \left({n-1}\right)</script>. The termination is <script type="math/tex">\mathcal P \left({0}\right)</script>, which is simply the empty set.</p>

<p>The following is a Scala implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="Scala"><span class="line"><span class="k">def</span> <span class="n">powerSet</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Set</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="nc">List</span><span class="o">(</span><span class="nc">Set</span><span class="o">[</span><span class="kt">Int</span><span class="o">]())</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">  <span class="k">val</span> <span class="n">rec</span> <span class="k">=</span> <span class="n">powerSet</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class="line">  <span class="n">rec</span> <span class="o">:::</span> <span class="n">rec</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">s</span> <span class="k">=&gt;</span> <span class="n">s</span> <span class="o">+</span> <span class="n">n</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log Every Second]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/02/log-every-second/"/>
    <updated>2014-12-02T21:54:15+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/02/log-every-second</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Please write a program which will log the sequence 1, 2, 3… , one number every second.
<!--more--></p>

<hr />

<p><strong>Solution</strong>:
The following is a simple Javascript implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="Javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">delay</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">logger</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="o">++</span><span class="nx">i</span><span class="p">;</span>
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class="line">      <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">logger</span><span class="p">,</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">logger</span><span class="p">();</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Follow-up Question</strong>: Can we be centain that the delay between two logging of two consecutive integerss will be exactly 1 second? If not, how would you improve it?</p>

<p><strong>Solution</strong>: An important concept to remember is that with Javascript timers, delay is not guaranteed. The browser operates in a single thread manner, processing
events that accumulate in an events queue and handles them sequentially. This means that there may be a slight delay between the moment that the event was fired and
the moment that the browser started to process it.</p>

<p>To improve the delays accurancy we can run this code in a dedicated thread, by utilizing a <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers">web worker</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plus Minus Array]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/12/01/plus-minus-array/"/>
    <updated>2014-12-01T23:17:39+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/12/01/plus-minus-array</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: We are givan an array <script type="math/tex">A</script> (with size <script type="math/tex">n</script>) where every cell holds either ‘+’ or ‘-‘.
We’re told that <script type="math/tex">A[0]</script> = ‘+’ and that <script type="math/tex">A[n-1]</script> = ‘-‘. Describe an algorithm to find an index <script type="math/tex">j</script> such that <script type="math/tex">A[j]</script> = ‘+’
and <script type="math/tex">A[j+1]</script> = ‘-‘.</p>

<p><strong>Example</strong>: </p>

<table>
  <tbody>
    <tr>
      <td>A</td>
      <td>+</td>
      <td>+</td>
      <td>-</td>
      <td>+</td>
      <td>+</td>
      <td>+</td>
      <td>-</td>
      <td>-</td>
      <td>+</td>
      <td>-</td>
    </tr>
    <tr>
      <td>id</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      <td>7</td>
      <td>8</td>
      <td>9</td>
    </tr>
  </tbody>
</table>

<p>Correct answers for this example are <script type="math/tex">j=1</script>, <script type="math/tex">j=5</script> or <script type="math/tex">j=8</script> (each one is acceptable, no need to return them all).
<!--more--></p>

<hr />

<p><strong>Solution</strong>: We can use logic similar to binary search to solve this in <script type="math/tex">O(\log{} n)</script> time complexity. We’ll use two 
variables, <script type="math/tex">l</script> and <script type="math/tex">h</script>, and maintain the following invariant: <script type="math/tex">A[l]</script> = ‘+’ and <script type="math/tex">A[r]</script> = ‘-‘. In each step
we’ll check if <script type="math/tex">r=l+1</script>. If so, we’re done. else, we find the center point <script type="math/tex">c=\frac{l+r}{2}</script>. If <script type="math/tex">A[c</script>] = ‘+’ we’ll
update <script type="math/tex">l=c</script>, else <script type="math/tex">r=c</script>. Since in each step the distance between <script type="math/tex">l</script> and <script type="math/tex">r</script> diminishes, we know the process
will eventually terminate.</p>

<p>The following is a Scala implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="Scala"><span class="line"><span class="k">class</span> <span class="nc">PlusMinusArray</span> <span class="o">{</span>
</span><span class="line"><span class="k">def</span> <span class="n">search</span><span class="o">(</span><span class="n">array</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Char</span><span class="o">])</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">searchInner</span><span class="o">(</span><span class="n">l</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">h</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">h</span> <span class="o">==</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="n">l</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">mid</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="o">(</span><span class="n">h</span> <span class="o">-</span> <span class="n">l</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">      <span class="n">array</span><span class="o">(</span><span class="n">mid</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="sc">&#39;+&#39;</span> <span class="k">=&gt;</span> <span class="n">searchInner</span><span class="o">(</span><span class="n">mid</span><span class="o">,</span> <span class="n">h</span><span class="o">)</span>
</span><span class="line">        <span class="k">case</span> <span class="sc">&#39;-&#39;</span> <span class="k">=&gt;</span> <span class="n">searchInner</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">mid</span><span class="o">)</span>
</span><span class="line">        <span class="k">case</span> <span class="k">_</span>   <span class="k">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;invalid character &quot;</span> <span class="o">+</span> <span class="n">array</span><span class="o">(</span><span class="n">mid</span><span class="o">))</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">searchInner</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">array</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insert, Remove, Contains and Random in O(1)]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/11/29/insert/"/>
    <updated>2014-11-29T22:59:13+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/11/29/insert</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Design and implement a data structure that offers the operations Insert, Delete, Contains and RandomItem, all in <script type="math/tex">O(1)</script> (amortized) time complexity.
<!--more--></p>

<hr />

<p><strong>Solution</strong>: Our data structure will be made of two data structures: an array <script type="math/tex">A</script> to holds the items, and a hashtable <script type="math/tex">H</script> that map each item to its position in the array.
For example, after inserting items ‘b’, ‘a’, ‘z’, the data structures content will be as follows:</p>

<pre><code>A = ['b', 'a', 'z']
B = {'a' : 1, 'b' : 0, 'z' : 2}
</code></pre>

<ul>
  <li>insert(v): append <script type="math/tex">v</script> to <script type="math/tex">A</script> (let <script type="math/tex">i</script> be it’s index). Set <script type="math/tex">H[v] = i</script>.</li>
  <li>remove(v): let <script type="math/tex">m</script> be the last index in <script type="math/tex">A</script> and let <script type="math/tex">d=A[m]</script>. let <script type="math/tex">i= H[v]</script> (that is, the index in <script type="math/tex">A</script> of the value to be removed). Set <script type="math/tex">A[i]=d</script>, <script type="math/tex">H[d]=i</script>, decrease the size of the array by one and remove <script type="math/tex">H[v]</script>.</li>
  <li>contains(v): return <script type="math/tex">H.contains(value)</script></li>
  <li>getRandomElement(): let <script type="math/tex">r</script>=random(current size of A). return <script type="math/tex">A[r]</script>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Square Root (Solution)]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/11/29/square-root/"/>
    <updated>2014-11-29T18:20:21+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/11/29/square-root</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Givan two real numbers <script type="math/tex">x</script> and <script type="math/tex">\epsilon</script>, find the square root of <script type="math/tex">x</script> within error margin of <script type="math/tex">\epsilon</script> 
(in other words, find <script type="math/tex">y</script> such that <script type="math/tex">% &lt;![CDATA[
 \lvert \sqrt{x} - y \rvert < \epsilon %]]&gt;</script>). Obviously, you’re not allowed to use the standard <code>sqrt</code> function. 
<!--more--></p>

<hr />

<p><strong>Solution</strong>: The general idea is to guess a solution <script type="math/tex">y</script> and then iteratively improve it. If <script type="math/tex">y^2 > x</script>, we should aim lower, so in the next step we’ll try <script type="math/tex">y - stepSize</script>. 
else, we should aim higher, so we’ll try <script type="math/tex">y + stepSize</script>. As we approach our target we should refine our search, so we’ll divide <script type="math/tex">stepSize</script> by 2.
We can start from any number, we’ll select arbitrarily <script type="math/tex">\frac{x}{2}</script>.</p>

<p>The following is a Scala implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="Scala"><span class="line"><span class="k">class</span> <span class="nc">Sqrt</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">sqrt</span><span class="o">(</span><span class="n">x</span> <span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">err</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="n">sqrtHelper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">err</span><span class="o">,</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">x</span><span class="o">,</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="n">x</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">sqrtHelper</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">allowedError</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">curr</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">stepSize</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">err</span> <span class="k">=</span> <span class="n">x</span> <span class="o">-</span> <span class="o">(</span><span class="n">curr</span> <span class="o">*</span> <span class="n">curr</span><span class="o">)</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="n">abs</span><span class="o">(</span><span class="n">err</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">allowedError</span><span class="o">)</span>
</span><span class="line">      <span class="n">curr</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="n">sqrtHelper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">allowedError</span><span class="o">,</span> <span class="k">if</span> <span class="o">(</span><span class="n">err</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">curr</span> <span class="o">+</span> <span class="n">stepSize</span> <span class="k">else</span> <span class="n">curr</span> <span class="o">-</span> <span class="n">stepSize</span><span class="o">,</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">stepSize</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keypad]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/11/28/keypad/"/>
    <updated>2014-11-28T12:43:56+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/11/28/keypad</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Given the English alphabet, ‘a’ through ‘z’ (lowercase), and an imaginary onscreen keyboard with the letters laid out in 6 rows and 5 columns:</p>

<pre><code>a b c d e
f g h i j
k l m n o
p q r s t
u v w x y
z
</code></pre>

<p>write a function that given a word will produce the sequence of key presses required to type out the word on the onscreen keyboard. The function should return the sequence string (up - ‘u’, down - ‘d’, left - ‘l’, right - ‘r’ and enter - ‘!’).
<!--more--></p>

<hr />

<p><strong>Solution</strong>: We build the solution in steps. We start with movements between two characters. To do it, we can find the x/y coordinates of both characters
and then recursively diminish the x and y differences. To adapt the solution for full word we should split the word to a list of character pairs (for example, convert “hello” to [(‘h’, ‘e’), (‘e’, ‘l’), (‘l’, ‘l’), (‘l’, ‘o’)]). 
Two more required changes are to prepend ‘a’ to the word (to start movemonts from the top left corner of the keypad) and insert ‘!’ whenever we reached a character of the word.</p>

<p>The following is a Scala solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="Scala"><span class="line"><span class="k">class</span> <span class="nc">Keypad</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">rowLength</span> <span class="k">=</span> <span class="mi">5</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">movements</span><span class="o">(</span><span class="n">from</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">),</span> <span class="n">to</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">from</span> <span class="o">==</span> <span class="n">to</span><span class="o">)</span> <span class="nc">Nil</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">xDiff</span> <span class="k">=</span> <span class="n">to</span><span class="o">.</span><span class="n">_1</span> <span class="o">-</span> <span class="n">from</span><span class="o">.</span><span class="n">_1</span>
</span><span class="line">    <span class="k">val</span> <span class="n">yDiff</span> <span class="k">=</span> <span class="n">to</span><span class="o">.</span><span class="n">_2</span> <span class="o">-</span> <span class="n">from</span><span class="o">.</span><span class="n">_2</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">xDiff</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">      <span class="s">&quot;l&quot;</span> <span class="o">::</span> <span class="n">movements</span><span class="o">(</span><span class="n">left</span><span class="o">(</span><span class="n">from</span><span class="o">),</span> <span class="n">to</span><span class="o">)</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">yDiff</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">      <span class="s">&quot;d&quot;</span> <span class="o">::</span> <span class="n">movements</span><span class="o">(</span><span class="n">down</span><span class="o">(</span><span class="n">from</span><span class="o">),</span> <span class="n">to</span><span class="o">)</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">yDiff</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">      <span class="s">&quot;u&quot;</span> <span class="o">::</span> <span class="n">movements</span><span class="o">(</span><span class="n">up</span><span class="o">(</span><span class="n">from</span><span class="o">),</span> <span class="n">to</span><span class="o">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="s">&quot;r&quot;</span> <span class="o">::</span> <span class="n">movements</span><span class="o">(</span><span class="n">right</span><span class="o">(</span><span class="n">from</span><span class="o">),</span> <span class="n">to</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">movements</span><span class="o">(</span><span class="n">from</span><span class="k">:</span> <span class="kt">Char</span><span class="o">,</span> <span class="n">to</span><span class="k">:</span> <span class="kt">Char</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">movements</span><span class="o">(</span><span class="n">coords</span><span class="o">(</span><span class="n">from</span><span class="o">),</span> <span class="n">coords</span><span class="o">(</span><span class="n">to</span><span class="o">))</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">movements</span><span class="o">(</span><span class="n">pairs</span><span class="k">:</span> <span class="kt">List</span><span class="o">[(</span><span class="kt">Char</span>, <span class="kt">Char</span><span class="o">)])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">pairs</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="nc">Nil</span> <span class="k">else</span>
</span><span class="line">    <span class="n">movements</span><span class="o">(</span><span class="n">pairs</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">_1</span><span class="o">,</span> <span class="n">pairs</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span> <span class="o">:::</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;!&quot;</span><span class="o">)</span> <span class="o">:::</span> <span class="n">movements</span><span class="o">(</span><span class="n">pairs</span><span class="o">.</span><span class="n">tail</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">movements</span><span class="o">(</span><span class="n">word</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">chars</span> <span class="k">=</span> <span class="-Symbol">&#39;a</span><span class="err">&#39;</span> <span class="o">::</span> <span class="n">word</span><span class="o">.</span><span class="n">toList</span>
</span><span class="line">    <span class="k">val</span> <span class="n">pairs</span> <span class="k">=</span> <span class="n">chars</span> <span class="n">zip</span> <span class="n">chars</span><span class="o">.</span><span class="n">tail</span>
</span><span class="line">    <span class="n">movements</span><span class="o">(</span><span class="n">pairs</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">coords</span><span class="o">(</span><span class="n">c</span><span class="k">:</span> <span class="kt">Char</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">i</span> <span class="k">=</span> <span class="n">c</span> <span class="o">-</span> <span class="-Symbol">&#39;a</span><span class="err">&#39;</span>
</span><span class="line">    <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">rowLength</span><span class="o">,</span> <span class="n">i</span> <span class="o">/</span> <span class="n">rowLength</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">down</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="n">_2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class="line">  <span class="k">def</span> <span class="n">up</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="n">_2</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class="line">  <span class="k">def</span> <span class="n">right</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class="line">  <span class="k">def</span> <span class="n">left</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">))</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="n">_1</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="n">_2</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Have any questions / remarks? leave them at the commonts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deadly Island]]></title>
    <link href="http://interviewbits.herokuapp.com/blog/2014/11/28/deadly-island/"/>
    <updated>2014-11-28T06:57:33+02:00</updated>
    <id>http://interviewbits.herokuapp.com/blog/2014/11/28/deadly-island</id>
    <content type="html"><![CDATA[<p><strong>Question</strong>: Imagine an island made of <script type="math/tex">N \times M</script> tiled board, with a man standing in some initial position <script type="math/tex">(x,y)</script>. In each turn, the man steps either up, down, left or right (each
with probability 0.25). If the man steps out of the island, he dies. Calculate the probability that the man will live after traveling for <script type="math/tex">n</script> steps.
<!--more--></p>

<hr />

<p><strong>Solution</strong>: We’ll mark the probabily that the man, located at <script type="math/tex">(x,y)</script> will live for <script type="math/tex">n</script> steps with <script type="math/tex">p(x,y,n)</script>. Using the <a href="http://en.wikipedia.org/wiki/Law_of_total_probability">Law of total probability</a>,
we can derive the following equation: </p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{split}
&p(x,y,n) = \\ &\frac{p(x-1,y,n-1) + p(x+1,y,n-1) + p(x,y-1,n-1) + p(x,y+1,n-1)}{4}
\end{split}
 %]]&gt;</script>

<p>Of course, if the man steps outside of the island boundaries, the probability is 0.</p>

<p>This is easy enough to program, but to make it run at reasonable speed, we’ll memoize the probabilities calculated before for certain values of <script type="math/tex">x,y</script> and <script type="math/tex">n</script> (a common idiom 
in <a href="http://en.wikipedia.org/wiki/Dynamic_programming">Dynamic Programming</a>.
The following is a Scala implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="Scala"><span class="line"><span class="k">class</span> <span class="nc">DeadlyIsland</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="nc">MaxSteps</span> <span class="k">=</span> <span class="mi">100</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">memoization</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">.</span><span class="n">ofDim</span><span class="o">[</span><span class="kt">Double</span><span class="o">](</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="nc">MaxSteps</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">calculate</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">steps</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="n">m</span><span class="o">)</span>
</span><span class="line">      <span class="mf">0.0</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">steps</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">        <span class="mi">1</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">memoization</span><span class="o">(</span><span class="n">x</span><span class="o">)(</span><span class="n">y</span><span class="o">)(</span><span class="n">steps</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mf">0.0</span><span class="o">)</span>
</span><span class="line">            <span class="n">memoization</span><span class="o">(</span><span class="n">x</span><span class="o">)(</span><span class="n">y</span><span class="o">)(</span><span class="n">steps</span><span class="o">)</span>
</span><span class="line">        <span class="k">else</span> <span class="o">{</span>
</span><span class="line">            <span class="k">val</span> <span class="n">prob</span> <span class="k">=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="o">(</span>
</span><span class="line">                <span class="n">calculate</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">steps</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span>
</span><span class="line">                <span class="n">calculate</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">steps</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span>
</span><span class="line">                <span class="n">calculate</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">steps</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span>
</span><span class="line">                <span class="n">calculate</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">steps</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
</span><span class="line">            <span class="o">)</span>
</span><span class="line">            <span class="n">memoization</span><span class="o">(</span><span class="n">x</span><span class="o">)(</span><span class="n">y</span><span class="o">)(</span><span class="n">steps</span><span class="o">)</span> <span class="k">=</span> <span class="n">prob</span>
</span><span class="line">            <span class="n">prob</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Have any questions / remarks? leave them at the commonts below!</p>

]]></content>
  </entry>
  
</feed>
